#!/usr/bin/env python3
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import numpy as np
import cv2

class DetectorSenal:
    def __init__(self):
        rospy.init_node('node_capture')

        self.pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
        self.sub = rospy.Subscriber('/camera/rgb/image_raw', Image, self.image_callback)
        self.bridge = CvBridge()

        self.img_ref = cv2.imread('/home/dave/catkin_ws/src/TareaAutonoma/descriptores/src/resbalar.jpg', cv2.IMREAD_GRAYSCALE)
        self.sift = cv2.SIFT_create()
        self.kp_ref, self.des_ref = self.sift.detectAndCompute(self.img_ref, None)

        FLANN_INDEX_KDTREE = 1
        index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)
        search_params = dict(checks=50)
        self.flann = cv2.FlannBasedMatcher(index_params, search_params)

    def image_callback(self, msg):
        

        frame = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        kp_frame, des_frame = self.sift.detectAndCompute(gray, None)

        if des_frame is None or self.des_ref is None or len(des_frame) == 0 or len(self.des_ref) == 0:
            return

        matches = self.flann.knnMatch(self.des_ref, des_frame, k=2)
        good_matches = [m for m, n in matches if m.distance < 0.75 * n.distance]

        twist = Twist()

        if len(good_matches) >= 10:
            pts_ref = np.float32([self.kp_ref[m.queryIdx].pt for m in good_matches]).reshape(-1, 1, 2)
            pts_frame = np.float32([kp_frame[m.trainIdx].pt for m in good_matches]).reshape(-1, 1, 2)
            H, _ = cv2.findHomography(pts_ref, pts_frame, cv2.RANSAC, 5.0)

            if H is not None:
                h, w = self.img_ref.shape
                pts_ref_corners = np.float32([[0, 0], [0, h], [w, h], [w, 0]]).reshape(-1, 1, 2)
                frame_corners = cv2.perspectiveTransform(pts_ref_corners, H)

                frame = cv2.polylines(frame, [np.int32(frame_corners)], True, (0, 255, 0), 3)

                w_obj = np.linalg.norm(frame_corners[0] - frame_corners[1])
                cv2.putText(frame, f"Ancho px: {int(w_obj)}", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)

                cx = np.mean([pt[0][0] for pt in frame_corners])
                center_x = frame.shape[1] / 2

                if abs(cx - center_x) < 80:
                    rospy.loginfo("SeÃ±al centrada y detectada.")
                    if w_obj < 220:
                        twist.angular.z = 0.0
                        twist.linear.x = 0.1
                        self.pub.publish(twist)
                        rospy.loginfo("Avanzando")
                    else:
                        twist.angular.z = 0.0
                        twist.linear.x = 0.0
                        self.pub.publish(twist)
                        rospy.loginfo("Resbalarse")

                else:
                    twist.angular.z = 0.2
                    twist.linear.x = 0.0
            else:
                twist.angular.z = 0.2
                twist.linear.x = 0.0
        else:
            twist.angular.z = 0.2
            twist.linear.x = 0.0

        self.pub.publish(twist)
        cv2.imshow("Camara", frame)
        cv2.waitKey(1)


if __name__ == '__main__':
    DetectorSenal()
    rospy.spin()
